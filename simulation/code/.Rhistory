plot(output[[2]])
dev.off()
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, height = 7)
par(mar = c(5, 5, 5, 5), oma = c(2, 2, 2, 2))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, height = 7)
par(mar = c(1, 1, 1, 1), oma = c(1, 1, 1, 1))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, height = 7, paper = "special")
par(mar = c(1, 1, 1, 1), oma = c(1, 1, 1, 1))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, height = 7, paper = "special")
par(mar = c(5, 5, 5, 5), oma = c(3, 3, 3, 3))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
pdf(file.path(output_path, "simulation_plots.pdf"), width = 10, 8)
par(mar = c(5, 5, 5, 5))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# (phi_ncog + (1 - phi_ncog) * (1 + data$SmallClassParticipation)) * data$latent_ncog + rnorm(n_new, mean = 0, sd = 5)
# Initial skills are a weighted average of treatment / environment effects + latent cognitive skills
# Interaction effects?
#data$TestScores_3 <- rnorm(n_new, mean = (1 + 0.5 * data$SmallClassParticipation) * data$latent_cog, sd = 5)
data$TestScores_3 <- data$latent_cog + rnorm(n_new, mean = 3*data$SmallClassParticipation, sd = 0.25)
data$SocialSkills_3 <- rnorm(n_new, mean = data$latent_ncog + rnorm(n_new, mean = 3*data$SmallClassParticipation), sd = 0.25)
# Define AR Process parameters
sigma <- 5
gamma_ncog <- 0.95
gamma_cog <- c(0.5, 0.75, 0.95)
#gamma_cog <- 0.6
phi <- 0.7
mean_test <- mean(subset(data, SmallClassParticipation == 0)$TestScores_3, na.rm = T)
mean_social <- mean(subset(data, SmallClassParticipation == 0)$SocialSkills_3, na.rm = T)
generate_data <- function(gamma_cog){
for (grade in 4:8){
prev_col <- paste0("TestScores_", grade - 1)
curr_col <- paste0("TestScores_", grade)
# Post-treatment environment is the same for everyone (enough to sustain the average performance in Gr.3)
data[[curr_col]] <- (gamma_cog * data[[prev_col]]^phi + (1-gamma_cog) * ((mean_test)^phi))^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
for (grade in 4:8){
prev_col <- paste0("SocialSkills_", grade - 1)
curr_col <- paste0("SocialSkills_", grade)
data[[curr_col]] <- (gamma_ncog * data[[prev_col]]^phi + (1-gamma_ncog) * ((mean_social))^phi)^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
# Longer DataFrame
data_long <- data %>%
select(SmallClassParticipation, matches("^SocialSkills_|^TestScores_")) %>%
pivot_longer(cols = matches("^SocialSkills_|^TestScores_"),
names_to = c(".value", "Grade"),
names_pattern = "(.*)_(\\d+)"
) %>%
mutate(Grade = as.numeric(Grade)) %>%
arrange(Grade) %>%
group_by(Grade, SmallClassParticipation) %>%
summarize(mean_social = mean(SocialSkills, na.rm = T),
mean_test = mean(TestScores, na.rm = T))
# General Plot by Treatment Class
plot_all <- ggplot(data = data_long, aes(x = Grade)) +
geom_line(aes(y = mean_social, color = "Social Skills")) +
geom_line(aes(y = mean_test, color = "Test Scores")) +
labs(
x = "Grade",
y = "Mean Scores",
title = "Mean Social Skills and Test Scores over Time by Class-size Treatment",
color = "Legend"  # Title of the legend
) +
facet_wrap(~ SmallClassParticipation, scales = "free") +
theme_minimal() +
theme(plot.margin = margin(2, 2, 2, 2, unit = "cm"))
# Plot difference between treatment class
plot_diff <- data_long %>%
filter(SmallClassParticipation %in% c(0,1)) %>%
group_by(Grade) %>%
pivot_wider(
names_from = SmallClassParticipation,
values_from = c(mean_social, mean_test)
) %>%
summarize(test_diff = mean_test_1 - mean_test_0,
social_diff = mean_social_1 - mean_social_0) %>%
ggplot(aes(x = Grade)) +
geom_line(aes(y = test_diff, color = "Test Score Gap")) +
geom_line(aes(y = social_diff, color = "Social Skill Gap")) +
labs(
x = "Grade",
y = "Skill difference between Treatment 1 and 0",
title = "Difference in skills over Time between Class = 1, Class = 0 Groups"
) +
theme_minimal() +
theme(plot.margin = margin(2, 2, 2, 2, unit = "cm"))
return(list(plot_all = plot_all, plot_diff = plot_diff, data = data))
}
# As academic skills become more self-productive, the fade-out effect lessens.
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, 8)
par(mar = c(5, 5, 5, 5))
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# Define phi = 0.75 as baseline
output <- generate_data(gamma_cog[2])
# Always forget but need to reference [[]] otherwise you just get a list with the single element
data <- output[[3]]
## code to synthetically create the star data, based on the summary stats of the variables
set.seed(123) # For reproducibility
# Define the number of new observations
n_existing <- 11599
n_new <- 2 * n_existing
# Generate synthetic data
data <- data.frame(
ID = 1:n_new,
Female = rbinom(n_new, 1, 0.471),
FreeLunch = rbinom(n_new, 1, 0.606),
RaceWhite = rbinom(n_new, 1, 0.628),
RaceBlack = rbinom(n_new, 1, 0.364),
RaceAsian = rbinom(n_new, 1, 0.0028),
RaceHispanic = rbinom(n_new, 1, 0.0018),
RaceNative = rbinom(n_new, 1, 0.0012),
InitialSmallClass = rbinom(n_new, 1, 0.261),
SmallK = rbinom(n_new, 1, 0.164),
Small1 = rbinom(n_new, 1, 0.166),
Small2 = rbinom(n_new, 1, 0.174),
Small3 = rbinom(n_new, 1, 0.187),
latent_cog = rnorm(n_new, mean = 50, sd = 10),
latent_ncog = rnorm(n_new, mean = 50, sd = 10)
)
# Ensure logical consistency (e.g., small class participation)
data$SmallK <- ifelse(data$InitialSmallClass == 1, rbinom(n_new, 1, 0.6), data$SmallK)
data$Small1 <- ifelse(data$SmallK == 1, rbinom(n_new, 1, 0.6), data$Small1)
data$Small2 <- ifelse(data$Small1 == 1, rbinom(n_new, 1, 0.6), data$Small2)
data$Small3 <- ifelse(data$Small2 == 1, rbinom(n_new, 1, 0.6), data$Small3)
# Initialize other columns
data$SmallClassParticipation <- rowMeans(data[, c("SmallK", "Small1", "Small2", "Small3")], na.rm = TRUE)
# Summarize the synthetic data
summary(data)
head(data)
# (phi_ncog + (1 - phi_ncog) * (1 + data$SmallClassParticipation)) * data$latent_ncog + rnorm(n_new, mean = 0, sd = 5)
# Initial skills are a weighted average of treatment / environment effects + latent cognitive skills
# Interaction effects?
#data$TestScores_3 <- rnorm(n_new, mean = (1 + 0.5 * data$SmallClassParticipation) * data$latent_cog, sd = 5)
data$TestScores_3 <- data$latent_cog + rnorm(n_new, mean = 3*data$SmallClassParticipation, sd = 0.25)
data$SocialSkills_3 <- rnorm(n_new, mean = data$latent_ncog + rnorm(n_new, mean = 3*data$SmallClassParticipation), sd = 0.25)
# Define AR Process parameters
sigma <- 5
gamma_ncog <- 0.95
gamma_cog <- c(0.5, 0.75, 0.95)
#gamma_cog <- 0.6
phi <- 0.7
mean_test <- mean(subset(data, SmallClassParticipation == 0)$TestScores_3, na.rm = T)
mean_social <- mean(subset(data, SmallClassParticipation == 0)$SocialSkills_3, na.rm = T)
generate_data <- function(gamma_cog){
for (grade in 4:8){
prev_col <- paste0("TestScores_", grade - 1)
curr_col <- paste0("TestScores_", grade)
# Post-treatment environment is the same for everyone (enough to sustain the average performance in Gr.3)
data[[curr_col]] <- (gamma_cog * data[[prev_col]]^phi + (1-gamma_cog) * ((mean_test)^phi))^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
for (grade in 4:8){
prev_col <- paste0("SocialSkills_", grade - 1)
curr_col <- paste0("SocialSkills_", grade)
data[[curr_col]] <- (gamma_ncog * data[[prev_col]]^phi + (1-gamma_ncog) * ((mean_social))^phi)^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
# Longer DataFrame
data_long <- data %>%
select(SmallClassParticipation, matches("^SocialSkills_|^TestScores_")) %>%
pivot_longer(cols = matches("^SocialSkills_|^TestScores_"),
names_to = c(".value", "Grade"),
names_pattern = "(.*)_(\\d+)"
) %>%
mutate(Grade = as.numeric(Grade)) %>%
arrange(Grade) %>%
group_by(Grade, SmallClassParticipation) %>%
summarize(mean_social = mean(SocialSkills, na.rm = T),
mean_test = mean(TestScores, na.rm = T))
# General Plot by Treatment Class
plot_all <- ggplot(data = data_long, aes(x = Grade)) +
geom_line(aes(y = mean_social, color = "Social Skills")) +
geom_line(aes(y = mean_test, color = "Test Scores")) +
labs(
x = "Grade",
y = "Mean Scores",
title = "Mean Social Skills and Test Scores over Time by Class-size Treatment",
color = "Legend"  # Title of the legend
) +
facet_wrap(~ SmallClassParticipation, scales = "free") +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
# Plot difference between treatment class
plot_diff <- data_long %>%
filter(SmallClassParticipation %in% c(0,1)) %>%
group_by(Grade) %>%
pivot_wider(
names_from = SmallClassParticipation,
values_from = c(mean_social, mean_test)
) %>%
summarize(test_diff = mean_test_1 - mean_test_0,
social_diff = mean_social_1 - mean_social_0) %>%
ggplot(aes(x = Grade)) +
geom_line(aes(y = test_diff, color = "Test Score Gap")) +
geom_line(aes(y = social_diff, color = "Social Skill Gap")) +
labs(
x = "Grade",
y = "Skill difference between Treatment 1 and 0",
title = "Difference in skills over Time between Class = 1, Class = 0 Groups"
) +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
return(list(plot_all = plot_all, plot_diff = plot_diff, data = data))
}
# As academic skills become more self-productive, the fade-out effect lessens.
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, 8)
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
set.seed(123)
# (phi_ncog + (1 - phi_ncog) * (1 + data$SmallClassParticipation)) * data$latent_ncog + rnorm(n_new, mean = 0, sd = 5)
# Initial skills are a weighted average of treatment / environment effects + latent cognitive skills
# Interaction effects?
#data$TestScores_3 <- rnorm(n_new, mean = (1 + 0.5 * data$SmallClassParticipation) * data$latent_cog, sd = 5)
data$TestScores_3 <- data$latent_cog + rnorm(n_new, mean = 3*data$SmallClassParticipation, sd = 0.25)
data$SocialSkills_3 <- rnorm(n_new, mean = data$latent_ncog + rnorm(n_new, mean = 3*data$SmallClassParticipation), sd = 0.25)
# Define AR Process parameters
sigma <- 5
gamma_ncog <- 0.95
gamma_cog <- c(0.5, 0.75, 0.95)
#gamma_cog <- 0.6
phi <- 0.7
mean_test <- mean(subset(data, SmallClassParticipation == 0)$TestScores_3, na.rm = T)
mean_social <- mean(subset(data, SmallClassParticipation == 0)$SocialSkills_3, na.rm = T)
generate_data <- function(gamma_cog){
for (grade in 4:8){
prev_col <- paste0("TestScores_", grade - 1)
curr_col <- paste0("TestScores_", grade)
# Post-treatment environment is the same for everyone (enough to sustain the average performance in Gr.3)
data[[curr_col]] <- (gamma_cog * data[[prev_col]]^phi + (1-gamma_cog) * ((mean_test)^phi))^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
for (grade in 4:8){
prev_col <- paste0("SocialSkills_", grade - 1)
curr_col <- paste0("SocialSkills_", grade)
data[[curr_col]] <- (gamma_ncog * data[[prev_col]]^phi + (1-gamma_ncog) * ((mean_social))^phi)^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
# Longer DataFrame
data_long <- data %>%
select(SmallClassParticipation, matches("^SocialSkills_|^TestScores_")) %>%
pivot_longer(cols = matches("^SocialSkills_|^TestScores_"),
names_to = c(".value", "Grade"),
names_pattern = "(.*)_(\\d+)"
) %>%
mutate(Grade = as.numeric(Grade)) %>%
arrange(Grade) %>%
group_by(Grade, SmallClassParticipation) %>%
summarize(mean_social = mean(SocialSkills, na.rm = T),
mean_test = mean(TestScores, na.rm = T))
# General Plot by Treatment Class
plot_all <- ggplot(data = data_long, aes(x = Grade)) +
geom_line(aes(y = mean_social, color = "Social Skills")) +
geom_line(aes(y = mean_test, color = "Test Scores")) +
labs(
x = "Grade",
y = "Mean Scores",
title = "Mean Social Skills and Test Scores over Time by Class-size Treatment",
color = "Legend"  # Title of the legend
) +
facet_wrap(~ SmallClassParticipation, scales = "free") +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
# Plot difference between treatment class
plot_diff <- data_long %>%
filter(SmallClassParticipation %in% c(0,1)) %>%
group_by(Grade) %>%
pivot_wider(
names_from = SmallClassParticipation,
values_from = c(mean_social, mean_test)
) %>%
summarize(test_diff = mean_test_1 - mean_test_0,
social_diff = mean_social_1 - mean_social_0) %>%
ggplot(aes(x = Grade)) +
geom_line(aes(y = test_diff, color = "Test Score Gap")) +
geom_line(aes(y = social_diff, color = "Social Skill Gap")) +
labs(
x = "Grade",
y = "Skill difference between Treatment 1 and 0",
title = "Difference in skills over Time between Class = 1, Class = 0 Groups"
) +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
return(list(plot_all = plot_all, plot_diff = plot_diff, data = data))
}
# As academic skills become more self-productive, the fade-out effect lessens.
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, 8)
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# Define phi = 0.75 as baseline
output <- generate_data(gamma_cog[2])
# Always forget but need to reference [[]] otherwise you just get a list with the single element
data <- output[[3]]
## code to synthetically create the star data, based on the summary stats of the variables
set.seed(123) # For reproducibility
# Define the number of new observations
n_existing <- 11599
n_new <- 2 * n_existing
# Generate synthetic data
data <- data.frame(
ID = 1:n_new,
Female = rbinom(n_new, 1, 0.471),
FreeLunch = rbinom(n_new, 1, 0.606),
RaceWhite = rbinom(n_new, 1, 0.628),
RaceBlack = rbinom(n_new, 1, 0.364),
RaceAsian = rbinom(n_new, 1, 0.0028),
RaceHispanic = rbinom(n_new, 1, 0.0018),
RaceNative = rbinom(n_new, 1, 0.0012),
InitialSmallClass = rbinom(n_new, 1, 0.261),
SmallK = rbinom(n_new, 1, 0.164),
Small1 = rbinom(n_new, 1, 0.166),
Small2 = rbinom(n_new, 1, 0.174),
Small3 = rbinom(n_new, 1, 0.187),
latent_cog = rnorm(n_new, mean = 50, sd = 10),
latent_ncog = rnorm(n_new, mean = 50, sd = 10)
)
# Ensure logical consistency (e.g., small class participation)
data$SmallK <- ifelse(data$InitialSmallClass == 1, rbinom(n_new, 1, 0.6), data$SmallK)
data$Small1 <- ifelse(data$SmallK == 1, rbinom(n_new, 1, 0.6), data$Small1)
data$Small2 <- ifelse(data$Small1 == 1, rbinom(n_new, 1, 0.6), data$Small2)
data$Small3 <- ifelse(data$Small2 == 1, rbinom(n_new, 1, 0.6), data$Small3)
# Initialize other columns
data$SmallClassParticipation <- rowMeans(data[, c("SmallK", "Small1", "Small2", "Small3")], na.rm = TRUE)
# Summarize the synthetic data
summary(data)
head(data)
set.seed(123)
# (phi_ncog + (1 - phi_ncog) * (1 + data$SmallClassParticipation)) * data$latent_ncog + rnorm(n_new, mean = 0, sd = 5)
# Initial skills are a weighted average of treatment / environment effects + latent cognitive skills
# Interaction effects?
#data$TestScores_3 <- rnorm(n_new, mean = (1 + 0.5 * data$SmallClassParticipation) * data$latent_cog, sd = 5)
data$TestScores_3 <- data$latent_cog + rnorm(n_new, mean = 3*data$SmallClassParticipation, sd = 0.25)
data$SocialSkills_3 <- rnorm(n_new, mean = data$latent_ncog + rnorm(n_new, mean = 3*data$SmallClassParticipation), sd = 0.25)
# Define AR Process parameters
sigma <- 5
gamma_ncog <- 0.95
gamma_cog <- c(0.5, 0.75, 0.95)
#gamma_cog <- 0.6
phi <- 0.7
mean_test <- mean(subset(data, SmallClassParticipation == 0)$TestScores_3, na.rm = T)
mean_social <- mean(subset(data, SmallClassParticipation == 0)$SocialSkills_3, na.rm = T)
generate_data <- function(gamma_cog){
for (grade in 4:8){
prev_col <- paste0("TestScores_", grade - 1)
curr_col <- paste0("TestScores_", grade)
# Post-treatment environment is the same for everyone (enough to sustain the average performance in Gr.3)
data[[curr_col]] <- (gamma_cog * data[[prev_col]]^phi + (1-gamma_cog) * ((mean_test)^phi))^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
for (grade in 4:8){
prev_col <- paste0("SocialSkills_", grade - 1)
curr_col <- paste0("SocialSkills_", grade)
data[[curr_col]] <- (gamma_ncog * data[[prev_col]]^phi + (1-gamma_ncog) * ((mean_social))^phi)^(1/phi) + rnorm(n_new, mean = 0, sd = sigma)
}
# Longer DataFrame
data_long <- data %>%
select(SmallClassParticipation, matches("^SocialSkills_|^TestScores_")) %>%
pivot_longer(cols = matches("^SocialSkills_|^TestScores_"),
names_to = c(".value", "Grade"),
names_pattern = "(.*)_(\\d+)"
) %>%
mutate(Grade = as.numeric(Grade)) %>%
arrange(Grade) %>%
group_by(Grade, SmallClassParticipation) %>%
summarize(mean_social = mean(SocialSkills, na.rm = T),
mean_test = mean(TestScores, na.rm = T))
# General Plot by Treatment Class
plot_all <- ggplot(data = data_long, aes(x = Grade)) +
geom_line(aes(y = mean_social, color = "Social Skills")) +
geom_line(aes(y = mean_test, color = "Test Scores")) +
labs(
x = "Grade",
y = "Mean Scores",
title = "Mean Social Skills and Test Scores over Time by Class-size Treatment",
color = "Legend"  # Title of the legend
) +
facet_wrap(~ SmallClassParticipation, scales = "free") +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
# Plot difference between treatment class
plot_diff <- data_long %>%
filter(SmallClassParticipation %in% c(0,1)) %>%
group_by(Grade) %>%
pivot_wider(
names_from = SmallClassParticipation,
values_from = c(mean_social, mean_test)
) %>%
summarize(test_diff = mean_test_1 - mean_test_0,
social_diff = mean_social_1 - mean_social_0) %>%
ggplot(aes(x = Grade)) +
geom_line(aes(y = test_diff, color = "Test Score Gap")) +
geom_line(aes(y = social_diff, color = "Social Skill Gap")) +
labs(
x = "Grade",
y = "Skill difference between Treatment 1 and 0",
title = "Difference in skills over Time between Class = 1, Class = 0 Groups"
) +
theme_minimal() +
theme(plot.margin = margin(4, 4, 4, 4, unit = "cm"))
return(list(plot_all = plot_all, plot_diff = plot_diff, data = data))
}
# As academic skills become more self-productive, the fade-out effect lessens.
# Check and save the plots
pdf(file.path(output_path, "simulation_plots.pdf"), width = 12, 8)
output <- generate_data(gamma_cog[1])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[2])
plot(output[[1]])
plot(output[[2]])
output <- generate_data(gamma_cog[3])
plot(output[[1]])
plot(output[[2]])
dev.off()
# Define phi = 0.75 as baseline
output <- generate_data(gamma_cog[2])
# Always forget but need to reference [[]] otherwise you just get a list with the single element
data <- output[[3]]
knitr::opts_chunk$set(echo = TRUE)
if (!require(dplyr)) install.packages("dplyr"); library(dplyr)
if (!require(tidyr)) install.packages("tidyr"); library(tidyr)
if (!require(ggplot2)) install.packages("ggplot2"); library(ggplot2)
if (!require(haven)) install.packages("haven"); library(haven)
if (!require(knitr)) install.packages("knitr"); library(knitr)
# Set wd
output_path <- "../output/"
data_path <- "../data/"
star_data <- read_dta(file.path(data_path, "dataset_for_kevin.dta"))
star_data <- read_dta(file.path(data_path, "dataset_for_kevin.dta"))
``
star_data <- read_dta(file.path(data_path, "dataset_for_kevin.dta"))
star_data
star_data <- read_dta(file.path(data_path, "STAR_extract.dta"))
star_data
star_data <- read_dta(file.path(data_path, "dataset_for_kevin.dta"))
star_data <- read_dta(file.path(data_path, "dataset_for_kevin.dta"))
star_data <- read_dta(file.path(data_path, "STAR_extract.dta"))
s
colSums(is.na(star_data))
star_extract <- read_dta(file.path(data_path, "STAR_extract.dta"))
colSums(is.na(star_extract))
